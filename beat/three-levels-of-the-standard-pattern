#!/usr/bin/env perl
#
# Possibly suitable for drum-work.
#
# Possibly more tractable via eg/rhythm2midi of the Music::RecRhythm
# module, which was written as a cleanup of this code.

use 5.14.0;
use warnings;
use MIDI;
use lib 'perl5/lib';
use Music::RhythmSet;

sub VELO_OFF () { 0 }

my $midi_filename = shift // 'three-levels-of-the-standard-pattern.midi';

# The "Standard Pattern" according to drummer Desmond K. Tai, as quoted
# in "The Geometry of Musical Rhythm" p.79. Also, intervals of the
# Major scale.
my $stdpat =
  Music::RhythmSet->new( set => [qw/2 2 1 2 2 2 1/], is_silent => 1 );
my ( $nextpat, $prevpat );
$prevpat = $stdpat;
for my $x ( 1 .. 3 ) {
    $nextpat = $prevpat->rebuild;
    $prevpat->next($nextpat);
    $prevpat = $nextpat;
}
$nextpat->is_silent(0);

# Recurse building MIDI tracks (where there is a complete cycle of each
# ->next under each rhythmic unit of the given set).
my @tracks;
# TODO this could just be a method call, with 1st level doing the beatsum
# thing, and then tracks handled instead by a callback that does MIDI or
# ly or whatever
durify( $stdpat, \@tracks, $stdpat->beatsum * 2000 );

my $opus =
  MIDI::Opus->new( { ticks => 384, tracks => [ grep defined, @tracks ] } );
$opus->write_to_file($midi_filename);

sub durify {
    my ( $rset, $tracks, $basetime, $level ) = @_;
    $level //= 0;

    my $sil = $rset->is_silent;
    my ( $trackno, $channel );
    if ( !$sil ) {
        if ( !defined $tracks->[$level] ) {
            $tracks->[$level] = new_track_on_the_block();
        }
    }
    $channel = 0;

    my $units    = $rset->sum;
    my $unittime = $basetime / $units;

    for my $beat ( @{ $rset->set } ) {
        my $duration = int( $unittime * $beat );
        if ( !$sil ) {
            # ... | mathu basic to see what the durations work out to.
            # TODO need better way to get minimum duration and work back
            # from that
            say $duration;
            my $pitch = 60;
            my $velo  = 47 + int( rand 21 + rand 21 + rand 21 );

            $tracks->[$level]->new_event( 'note_on', 0, $channel, $pitch, $velo );
            $tracks->[$level]
              ->new_event( 'note_off', $duration, $channel, $pitch, VELO_OFF );
        }

        my $next = $rset->next;
        durify( $next, $tracks, $duration, $level + 1 ) if defined $next;
    }
}

sub new_track_on_the_block {
    my $track = MIDI::Track->new;
    $track->new_event( 'set_tempo', 0, 500000 );
    $track->new_event( 'patch_change', 0, 0, 0 );
    return $track;
}
